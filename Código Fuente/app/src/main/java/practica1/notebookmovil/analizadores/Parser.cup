package practica1.notebookmovil.analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
    public String texto = " ";

    public String getTexto() {
        return texto;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("Error sintáctico en línea " + (s.left + 1) + ", columna " + (s.right + 1) + ": " + message);
        } else {
            System.err.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        throw new Exception("Error sintáctico irrecuperable.");
    }
:}

terminal CADENA, NUMERO, SUMA, RESTA, MULTIPLICACION, DIVISION, PARENTESIS_ABRE, PARENTESIS_CIERRA, POTENCIA, IGUAL;
terminal HEADER1, HEADER2, HEADER3, HEADER4, HEADER5, HEADER6, TEXT_NEGRITA, TEXT_NEGRITA_ITALICA, COMILLAS, COMA, VARIABLE, PRINT, FORMAT, PLOT;

non terminal inicial, operacion, header, textos, parrafos, variables, impresion, format, ploteo;

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left POTENCIA;
precedence left NUMERO;
precedence left CADENA;

start with inicial;

inicial ::= operacion:op        {: texto = "Resultado: " + String.valueOf(op); :}
            | header:hed        {: texto = String.valueOf(hed); :}
            | textos:txt        {: texto = String.valueOf(txt); :}
            | parrafos:parr     {: texto = String.valueOf(parr); :}
            | variables: var    {: texto = String.valueOf(var); :}
            | impresion:imp     {: texto = String.valueOf(imp); :}
            | format:form       {: texto = String.valueOf(form); :}
            | ploteo:plot       {: texto = String.valueOf(plot); :};

operacion ::= operacion:e1 SUMA operacion:e2                  {: RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue(); :}
            | operacion:e1 RESTA operacion:e2                 {: RESULT = ((Number)e1).doubleValue() - ((Number)e2).doubleValue(); :}
            | operacion:e1 MULTIPLICACION operacion:e2        {: RESULT = ((Number)e1).doubleValue() * ((Number)e2).doubleValue(); :}
            | operacion:e1 DIVISION operacion:e2              {: if (((Number)e2).doubleValue() == 0) {
                                                                        throw new ArithmeticException("División por cero");
                                                                 }
                                                                 RESULT = ((Number)e1).doubleValue() / ((Number)e2).doubleValue(); :}
            | operacion:e1 POTENCIA operacion:e2              {: RESULT = Math.pow(((Number)e1).doubleValue(), ((Number)e2).doubleValue()); :}
            | PARENTESIS_ABRE operacion:e PARENTESIS_CIERRA   {: RESULT = ((Number)e).doubleValue(); :}
            | NUMERO:n                                        {: RESULT = ((Number)n).doubleValue(); :}/**
            | error:err                                       {: report_error("Error al ingresar", err); RESULT = 0.0; :}*/;


impresion ::= PRINT PARENTESIS_ABRE COMILLAS parrafos:parr COMILLAS PARENTESIS_CIERRA        {: RESULT = parr; :}
            | PRINT PARENTESIS_ABRE variables:var PARENTESIS_CIERRA                          {: RESULT = var; :}
            | PRINT PARENTESIS_ABRE operacion:op PARENTESIS_CIERRA                           {: RESULT = op.toString(); :}
            | PRINT PARENTESIS_ABRE NUMERO:num PARENTESIS_CIERRA                             {: RESULT = String.valueOf(num); :}
            | PRINT PARENTESIS_ABRE COMILLAS CADENA:cad COMILLAS PARENTESIS_CIERRA           {: RESULT = cad; :};


//GRAMÁTICAS PARA MARKDOWN
header ::= HEADER1 parrafos:head                                  {: RESULT = head; :}
         | HEADER2 parrafos:head                                  {: RESULT = head; :}
         | HEADER3 parrafos:head                                  {: RESULT = head; :}
         | HEADER4 parrafos:head                                  {: RESULT = head; :}
         | HEADER5 parrafos:head                                  {: RESULT = head; :}
         | HEADER6 parrafos:head                                  {: RESULT = head; :};

textos ::= MULTIPLICACION parrafos:cad MULTIPLICACION             {: RESULT = cad; :}
         | TEXT_NEGRITA parrafos:cad TEXT_NEGRITA                 {: RESULT = cad; :}
         | TEXT_NEGRITA_ITALICA parrafos:cad TEXT_NEGRITA_ITALICA {: RESULT = cad; :};

parrafos ::= CADENA: cad                                          {: RESULT = cad; :}
           | parrafos:parr CADENA:cad                             {: RESULT = parr + " " + cad; :}
           | parrafos:parr NUMERO:num                             {: RESULT = String.valueOf(parr + " " + num); :};

variables ::= VARIABLE IGUAL operacion
            | VARIABLE IGUAL operacion SUMA variables
            | VARIABLE;

format ::= FORMAT PARENTESIS_ABRE operacion PARENTESIS_CIERRA;

ploteo ::= PLOT PARENTESIS_ABRE operacion COMA NUMERO COMA NUMERO PARENTESIS_CIERRA;