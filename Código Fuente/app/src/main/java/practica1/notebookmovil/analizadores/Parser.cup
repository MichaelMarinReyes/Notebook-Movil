package practica1.notebookmovil.analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;

parser code {:
    public Double resultado = 0.0;

    public Double getResultado() {
        return resultado;
    }

    public String texto = " ";

    public String getTexto() {
        return texto;
    }

    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("Error sintáctico en línea " + (s.left + 1) + ", columna " + (s.right + 1) + ": " + message);
        } else {
            System.err.println("Error sintáctico: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) throws Exception {
        report_error(message, info);
        throw new Exception("Error sintáctico irrecuperable.");
    }

    public void guardarValoresNumericos(Double valor) {
        System.out.println("entrando en funcion: " + valor);
        texto = String.valueOf(valor);
    }
:}

terminal CADENA, NUMERO, SUMA, RESTA, MULTIPLICACION, DIVISION, PARENTESIS_ABRE, PARENTESIS_CIERRA, POTENCIA, IGUAL;
terminal HEADER1, HEADER2, HEADER3, TEXT_NEGRITA, TEXT_NEGRITA_ITALICA, SALTO_LINEA, COMILLAS, COMA, VARIABLE, PRINT, FORMAT, PLOT;

non terminal inicial, operacion, header, textos, parrafos, variables, impresion, format, ploteo;

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left POTENCIA;
precedence left NUMERO;

start with inicial;

inicial ::= operacion:res {:    if (res != null) {
                                    resultado = (Double) res;
                                } else {
                                    report_error("Expresión inválida", null);
                                    resultado = 0.0;
                                }:}
            | header
            | textos
            | parrafos
            | variables
            | impresion:impresion
            | format
            | ploteo;

impresion ::= PRINT PARENTESIS_ABRE COMILLAS CADENA:cad COMILLAS PARENTESIS_CIERRA {: texto = String.valueOf(cad); RESULT = cad; :}
           | PRINT PARENTESIS_ABRE variables:var PARENTESIS_CIERRA {: texto = String.valueOf(var); RESULT = var; :}
           | PRINT PARENTESIS_ABRE operacion:op PARENTESIS_CIERRA {: texto = String.valueOf(op); RESULT = op.toString(); :}
           | PRINT PARENTESIS_ABRE NUMERO:num PARENTESIS_CIERRA {: texto = String.valueOf(num); RESULT = String.valueOf(num); :};


//GRAMÁTICAS PARA MARKDOWN
header ::= HEADER1 CADENA
        | HEADER2 CADENA
        | HEADER3 CADENA;

textos ::= MULTIPLICACION CADENA MULTIPLICACION
        | TEXT_NEGRITA CADENA TEXT_NEGRITA
        | TEXT_NEGRITA_ITALICA CADENA TEXT_NEGRITA_ITALICA;

parrafos ::= CADENA SALTO_LINEA
        | CADENA SALTO_LINEA parrafos;

variables ::= VARIABLE IGUAL operacion
           | VARIABLE IGUAL operacion SUMA variables
           | VARIABLE;

format ::= FORMAT PARENTESIS_ABRE operacion PARENTESIS_CIERRA;

ploteo ::= PLOT PARENTESIS_ABRE operacion COMA NUMERO COMA NUMERO PARENTESIS_CIERRA;

operacion ::= operacion:e1 SUMA operacion:e2                  {: guardarValoresNumericos(((Number)e1).doubleValue() + ((Number)e2).doubleValue()); System.out.println(RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue()); RESULT = ((Number)e1).doubleValue() + ((Number)e2).doubleValue(); :}
            | operacion:e1 RESTA operacion:e2                 {: guardarValoresNumericos(((Number)e1).doubleValue() - ((Number)e2).doubleValue()); RESULT = ((Number)e1).doubleValue() - ((Number)e2).doubleValue(); :}
            | operacion:e1 MULTIPLICACION operacion:e2        {: guardarValoresNumericos(((Number)e1).doubleValue() * ((Number)e2).doubleValue()); RESULT = ((Number)e1).doubleValue() * ((Number)e2).doubleValue(); :}
            | operacion:e1 DIVISION operacion:e2              {: if (((Number)e2).doubleValue() == 0) {
                                                                        throw new ArithmeticException("División por cero");
                                                                 }
                                                                 guardarValoresNumericos(((Number)e1).doubleValue() / ((Number)e2).doubleValue()); RESULT = ((Number)e1).doubleValue() / ((Number)e2).doubleValue(); :}
            | operacion:e1 POTENCIA operacion:e2              {: guardarValoresNumericos(Math.pow(((Number)e1).doubleValue(), ((Number)e2).doubleValue())); RESULT = Math.pow(((Number)e1).doubleValue(), ((Number)e2).doubleValue()); :}
            | PARENTESIS_ABRE operacion:e PARENTESIS_CIERRA   {: guardarValoresNumericos(((Number)e).doubleValue()); RESULT = ((Number)e).doubleValue(); :}
            | NUMERO:n                                        {: guardarValoresNumericos(((Number)n).doubleValue()); RESULT = ((Number)n).doubleValue(); :}
            | error:err                                       {: report_error("Error al ingresar", err); RESULT = 0.0; :};
